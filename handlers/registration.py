import asyncio
from io import BytesIO

import xlsxwriter as xlsxwriter
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from keyboards import *
from create_bot import bot, Nastya_id
import emoji
import datetime
import time
from aiogram.types import KeyboardButton, ReplyKeyboardRemove
import validators



class FSMAdmin(StatesGroup):
    question_name = State()
    question_birth = State()
    question_city = State()
    question_speciality = State()
    question_spec_etc = State()
    question_specialization = State()
    question_course = State()
    question_eng = State()
    question_linkedin = State()
    question_portfolio = State()
    question_sours = State()
    question_sours_etc = State()
    question_reason = State()
    question_idea = State()


async def start_program(message: types.Message):
    # if not db.user_exists(int(message.from_user.id)):
        #db.user_exists(int(message.from_user.id))
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –Ø ExLab Registration Bot!\n" + emoji.emojize(":vulcan_salute:") +
                         f"–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –∏ —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –∫–æ–º–∞–Ω–¥—ã ExLab!", reply_markup=start_kb_first)
    # else:
    #     await message.answer("–ü—Ä–∏–≤–µ—Ç!\n–¢—ã —É–∂–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –æ–ø—Ä–æ—Å.")


async def start_question(call: types.CallbackQuery, state=FSMContext):
    async with state.proxy() as data:
        data["tg_id"] = call.from_user.id
        data["tg_user_name"] = call.from_user.username
    # db.add_user(call.from_user.id, call.from_user.username)
    await FSMAdmin.question_name.set()
    await bot.send_message(call.from_user.id, "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—ÇüñêÔ∏è?\n–í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è.")


async def question_name(message: types.Message, state=FSMContext):
    # db.set_username(message.from_user.id, message.text)
    async with state.proxy() as data:
        data["name_surename"] = message.text
    await FSMAdmin.next()
    await message.answer(emoji.emojize(":baby:") + "–£–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.\n(dd.mm.yyyy)")


async def birth_day(message: types.Message, state=FSMContext):
    try:
        date_correct_dbase_format = datetime.datetime.strptime(message.text, "%d.%m.%Y").strftime("%Y-%m-%d")
        # db.birthday(message.from_user.id, date_correct_dbase_format)
        async with state.proxy() as data:
            data["birthday"] = date_correct_dbase_format
        await FSMAdmin.next()
        await message.answer(emoji.emojize(":cityscape:") + "–û—Ç–∫—É–¥–∞ —Ç—ã?\n"
                                                            "–£–∫–∞–∂–∏ —Å—Ç—Ä–∞–Ω—É –∏ –≥–æ—Ä–æ–¥.")
    except ValueError:
        await FSMAdmin.question_birth.set()
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥")


async def question_city(message: types.Message, state=FSMContext):
    # db.set_city(message.from_user.id, message.text)
    async with state.proxy() as data:
        data["city"] = message.text
    await FSMAdmin.next()
    await message.answer(emoji.emojize(":mechanic:") + "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—å.", reply_markup=kb_speciality)


async def my_speciality(message: types.Message, state=FSMContext):
    # db.set_speciality(message.from_user.id, message.text)
    async with state.proxy() as data:
        data["speciality"] = message.text
    await FSMAdmin.next()
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–º –æ–±—É—á–µ–Ω–∏–∏ –ø–æ —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.")


async def question_speciality(call: types.CallbackQuery, state=FSMContext):
    if call.data == "speciality_etc":
        await bot.send_message(call.from_user.id, "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å?")
        await FSMAdmin.question_spec_etc.set()
    else:
        # db.set_speciality(call.from_user.id, call.data)
        speciality = call.data[11::]
        async with state.proxy() as data:
            data["speciality"] = speciality
        await FSMAdmin.question_specialization.set()
        await bot.send_message(call.from_user.id, "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–º –æ–±—É—á–µ–Ω–∏–∏ –ø–æ —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.")


async def question_specialization(message: types.Message, state=FSMContext):
    # db.set_specialization(message.from_user.id, message.text)
    async with state.proxy() as data:
        data["specialization"] = message.text
    await FSMAdmin.next()
    await message.answer(emoji.emojize(":graduation_cap:") + "–ö–∞–∫–æ–π —É —Ç–µ–±—è —Å—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π?")


async def question_courses(message: types.Message, state=FSMContext):
    # db.set_courses(message.from_user.id, message.text)
    async with state.proxy() as data:
        data["courses"] = message.text
    await FSMAdmin.next()
    await message.answer(emoji.emojize(":face_with_tongue:") + "–£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–º?",
                         reply_markup=english_level)


async def eng_lev(call: types.CallbackQuery, state=FSMContext):
    # db.set_eng(call.from_user.id, call.data)
    english = call.data[-2::]
    async with state.proxy() as data:
        data["english"] = english
    await FSMAdmin.next()
    await bot.send_message(call.from_user.id, emoji.emojize(":link:") + "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π Linkedin.\n"
                                                                        "–¢–∞–∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä —Å–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–µ–µ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è."
                                                                        "\n–ü—Ä–∏–º–µ—Ä: https://www.linkedin.com/in/"
                                                                        "persone/")


async def link_linkedin(message: types.Message, state: FSMContext):
    txt = "https://www.linkedin.com/"
    if txt not in message.text:
        await message.answer(emoji.emojize(":face_screaming_in_fear:") + "–¢—ã –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! "
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!" + emoji.emojize(":face_screaming_in_fear:") +
                            "–ü—Ä–∏–º–µ—Ä: https://www.linkedin.com/in/persone/")
        await FSMAdmin.question_linkedin.set()
    else:
        # db.set_links(message.from_user.id, message.text)
        async with state.proxy() as data:
            data["linkedin"] = message.text
        await FSMAdmin.next()
        await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ. –ï—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å.",
                             reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                             .insert(KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")))


async def portfolio(message: types.Message, state=FSMContext):
    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await FSMAdmin.next()
        async with state.proxy() as data:
            data["portfolio"] = "-"
        await message.answer(emoji.emojize(":ear:") + "–ö–∞–∫ —Ç—ã —É–∑–Ω–∞–ª –æ–± ExLab?\n", reply_markup=source_exlab)
    else:
        if validators.url(message.text) is True:
            # db.set_portfolio(message.from_user.id, message.text)
            async with state.proxy() as data:
                data["portfolio"] = message.text
            await FSMAdmin.next()
            await message.answer(emoji.emojize(":ear:") + "–ö–∞–∫ —Ç—ã —É–∑–Ω–∞–ª –æ–± ExLab?\n", reply_markup=source_exlab)
        else:
            await message.answer("!–¢—ã –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL!\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
            await FSMAdmin.question_portfolio.set()


async def sourse_exlab_etc(message: types.Message, state=FSMContext):
    # db.set_sourse(message.from_user.id, message.text)
    async with state.proxy() as data:
        data["sourse_exlab"] = message.text
    await FSMAdmin.next()
    await message.answer(emoji.emojize(":white_question_mark:") + "–ü–æ—á–µ–º—É —Ç—ã —Ä–µ—à–∏–ª –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è "
                                                            "–∫ ExLab?" + emoji.emojize(":white_question_mark:"))


async def sourse_exlab(call: types.CallbackQuery, state=FSMContext):
    if call.data == "source_etc":
        await bot.send_message(call.from_user.id, "–ö–∞–∫ –∏–º–µ–Ω–Ω–æ —Ç—ã –æ –Ω–∞—Å —É–∑–Ω–∞–ª?", reply_markup=ReplyKeyboardRemove())
        await FSMAdmin.question_sours_etc.set()
    else:
        # db.set_sourse(call.from_user.id, call.data)
        sourses = call.data[7::]
        async with state.proxy() as data:
            data["sourse_exlab"] = sourses
        await FSMAdmin.question_reason.set()
        await bot.send_message(call.from_user.id, emoji.emojize(":white_question_mark:") +
                               "–ü–æ—á–µ–º—É —Ç—ã —Ä–µ—à–∏–ª –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ ExLab?" + emoji.emojize(":white_question_mark:"),
                               reply_markup=ReplyKeyboardRemove())


async def reason_exlab(message: types.Message, state: FSMContext):
    # db.set_reason(message.from_user.id, message.text)
    async with state.proxy() as data:
        data["reason_exlab"] = message.text
    await FSMAdmin.next()
    await message.answer(emoji.emojize(":gem_stone:") + "–£ —Ç–µ–±—è –µ—Å—Ç—å –∏–¥–µ—è, –∫–æ—Ç–æ—Ä—É—é –º—ã –º–æ–≥–ª–∏ –±—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–º–µ—Å—Ç–µ?" +
                         emoji.emojize(":gem_stone:"), reply_markup=answer_yes_no)


async def idea_exlab(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['idea'] = call.data
    # db.set_idea(call.from_user.id, call.data)
    # last_user = db.last_user(call.from_user.id)[0]
    await bot.send_message(Nastya_id, text=f"–ù–∞c—Ç—è –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!!!"
                                           f"\n–ò–º—è —Ç–µ–ª–µ–≥—Ä–∞–º —é–∑–µ—Ä–∞: {data['tg_user_name']}"
                                           f"\n–ò–º—è –§–∞–º–∏–ª–∏—è: {data['name_surename']}"
                                           f"\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['birthday']}"
                                           f"\n–ì–æ—Ä–æ–¥: {data['city']}"
                                           f"\n–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {data['speciality']}"
                                           f"\n–û–±—É—á–µ–Ω–∏–µ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: {data['specialization']}"
                                           f"\n–°—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π: {data['courses']}"
                                           f"\n–£—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ: {data['english']}"
                                           f"\n–°—Å—ã–ª–∫–∞ –Ω–∞ LinkedIn: {data['linkedin']}"
                                           f"\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {data['portfolio']}"
                                           f"\n–ö–∞–∫ –æ–Ω –Ω–∞—Å –Ω–∞—à–µ–ª: {data['sourse_exlab']}"
                                           f"\n–ü—Ä–∏—á–∏–Ω—ã: {data['reason_exlab']}"
                                           f"\n–ù–∞–ª–∏—á–∏–µ –∏–¥–µ–π: {data['idea']}")
    await state.finish()
    await bot.send_message(call.from_user.id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ExLab!\n–í –Ω–∞—à–µ–π —Ç–µ–ª–µ–≥—Ä–∞–º–º-–≥—Ä—É–ø–ø–µ —Ç—ã —Å–º–æ–∂–µ—à—å "
                                                   "–ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞.",
                           reply_markup=join_group)
    time.sleep(10)
    await bot.send_message(call.from_user.id, text="–û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.", reply_markup=rules)
    time.sleep(10)
    await bot.send_message(call.from_user.id, text="–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –Ω–∞—à–∏ —Å–æ—Ü —Å–µ—Ç–∏, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π "
                                                   "ExLab.", reply_markup=social_media)
    await bot.send_message(call.from_user.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –†–∞–¥—ã, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏!")
    if call.data == "YES":
        await bot.send_message(call.from_user.id, "–¢—ã —Å–∫–∞–∑–∞–ª —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –∏–¥–µ—è!\n–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–º –ø—Ä–æ–µ–∫—Ç–µ –∏ –º—ã "
                                                  "–ø–æ–º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –µ–≥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.")
    else:
        await bot.send_message(call.from_user.id, "–ö–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –∏–¥–µ—è –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–º –ø—Ä–æ–µ–∫—Ç–µ –∏ –º—ã "
                                                  "–ø–æ–º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –µ–≥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.")

# async def unsubscribe(call: types.CallbackQuery):
#     if call.data == "unsubscribe":
#         db.set_signup(call.from_user.id, False)
#         await call.message.delete()
#         await bot.send_message(call.from_user.id, "–¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=del_sub)
#     else:
#         db.set_signup(call.from_user.id, True)
#         await call.message.delete()
#         await bot.send_message(call.from_user.id, "–¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", reply_markup=del_unsub)


# async def del_user(message: types.Message):
#     db.user_del(message.from_user.id)
#     await message.delete()
#     await bot.send_message(message.from_user.id, emoji.emojize(":loudly_crying_face:") + "–¢—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª "
#                                                                                          "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
#                            + emoji.emojize(":loudly_crying_face:"), reply_markup=start_kb_first)


# async def get_nastia(message: types.Message):
#     await message.answer("–ê —Ç—ã —Ö—Ç–æ —Ç–∞–∫–æ–π!!!")
#     if message.from_user.id == Nastya_id:
#         try:
#             await bot.send_message(message.from_user.id, "–ü–æ–¥–æ–∂–¥–µ—à—å...–Ω–µ–∞–±—Å–µ—Ä—ã–®—Å—è!!")
#             a = db.all_users()
#             print(a)
#             output = BytesIO()
#             workbook = xlsxwriter.Workbook(output)
#             worksheet = workbook.add_worksheet('–°–≤–µ—Ç–ª—ã–µ_–≥–æ–ª–æ–≤—ã')  # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –≤ exel
#
#             cell_format = workbook.add_format({'bold': True, 'font_color': 'red'})
#             # –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–ø–æ–∫
#             worksheet.write(0, 0, 'ID —Ç–µ–ª–µ–≥–∏', cell_format)
#             worksheet.write(0, 1, '–ò–º—è —Ç–µ–ª–µ–≥—Ä–∞–º —é–∑–µ—Ä–∞', cell_format)
#             worksheet.write(0, 2, '–ò–º—è –§–∞–º–∏–ª–∏—è', cell_format)
#             worksheet.write(0, 3, '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è', cell_format)
#             worksheet.write(0, 4, '–ì–æ—Ä–æ–¥', cell_format)
#             worksheet.write(0, 5, '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', cell_format)
#             worksheet.write(0, 6, '–û–±—É—á–µ–Ω–∏–µ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', cell_format)
#             worksheet.write(0, 7, '–°—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π', cell_format)
#             worksheet.write(0, 8, '–£—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ', cell_format)
#             worksheet.write(0, 9, '–°—Å—ã–ª–∫–∞ –Ω–∞ LinkedIn', cell_format)
#             worksheet.write(0, 10, '–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ', cell_format)
#             worksheet.write(0, 11, '–ö–∞–∫ –æ–Ω –Ω–∞—Å –Ω–∞—à–µ–ª', cell_format)
#             worksheet.write(0, 12, '–ü—Ä–∏—á–∏–Ω—ã', cell_format)
#             worksheet.write(0, 13, '–ù–∞–ª–∏—á–∏–µ –∏–¥–µ–π', cell_format)
#
#             worksheet.set_column(0, 13, 30)  # –≠—Ç–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤. –¢.–µ. —Å 0 –ø–æ 1 —Å—Ç–æ–ª–±–µ—Ü —à–∏—Ä–∏–Ω–∞ 15 —Ö–∑ —á–µ–≥–æ
#
#             cell_format = workbook.add_format({'bold': False, 'font_color': 'black', 'align': 'left', 'valign': 'top'})
#             date_format = workbook.add_format({'num_format': 'd mmmm yyyy'})
#             # —ç—Ç–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
#             cell_format.set_text_wrap()
#             for i in range(1, len(a)):
#                 worksheet.write(i, 0, a[i - 1][0], cell_format)
#                 worksheet.write(i, 1, a[i - 1][1], cell_format)
#                 worksheet.write(i, 2, a[i - 1][2], cell_format)
#                 worksheet.write(i, 3, a[i - 1][3], date_format)
#                 worksheet.write(i, 4, a[i - 1][4], cell_format)
#                 worksheet.write(i, 5, a[i - 1][5], cell_format)
#                 worksheet.write(i, 6, a[i - 1][6], cell_format)
#                 worksheet.write(i, 7, a[i - 1][7], cell_format)
#                 worksheet.write(i, 8, a[i - 1][8], cell_format)
#                 worksheet.write(i, 9, a[i - 1][9], cell_format)
#                 worksheet.write(i, 10, a[i - 1][10], cell_format)
#                 worksheet.write(i, 11, a[i - 1][11], cell_format)
#                 worksheet.write(i, 12, a[i - 1][12], cell_format)
#                 worksheet.write(i, 13, a[i - 1][13], cell_format)
#             workbook.close()
#
#             file = output.getvalue()
#             file_name = f"abracadabra.xlsx"
#             await asyncio.sleep(5)
#
#             await bot.send_document(message.from_user.id, (file_name, file))
#         except:
#             await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")
#             workbook.close()
#     else:
#         await message.answer("–ê —Ç—ã —Ö—Ç–æ —Ç–∞–∫–æ–π!!!")





def register_handlers_registration(dp: Dispatcher):

    dp.register_message_handler(start_program, commands="start")
    # dp.register_message_handler(get_nastia, commands="abracadabra")
    dp.register_callback_query_handler(start_question, text="start_quiz")
    dp.register_message_handler(question_name, content_types=["text"], state=FSMAdmin.question_name)
    dp.register_message_handler(birth_day, content_types=["text"], state=FSMAdmin.question_birth)
    dp.register_message_handler(question_city, content_types=["text"], state=FSMAdmin.question_city)
    dp.register_callback_query_handler(question_speciality, text_contains="speciality",
                                       state=FSMAdmin.question_speciality)
    dp.register_message_handler(my_speciality, content_types=["text"], state=FSMAdmin.question_spec_etc)
    dp.register_message_handler(question_specialization, content_types=["text"], state=FSMAdmin.question_specialization)
    dp.register_message_handler(question_courses, content_types=["text"], state=FSMAdmin.question_course)
    dp.register_callback_query_handler(eng_lev, text_contains="en_level", state=FSMAdmin.question_eng)
    dp.register_message_handler(link_linkedin, content_types=["text"], state=FSMAdmin.question_linkedin)
    dp.register_message_handler(portfolio, content_types=["text"], state=FSMAdmin.question_portfolio)
    dp.register_callback_query_handler(sourse_exlab, text_contains="source", state=FSMAdmin.question_sours)
    dp.register_message_handler(sourse_exlab_etc, content_types=["text"], state=FSMAdmin.question_sours_etc)
    dp.register_message_handler(reason_exlab, content_types=["text"], state=FSMAdmin.question_reason)
    dp.register_callback_query_handler(idea_exlab, text=["YES", "NO"], state=FSMAdmin.question_idea)
    # dp.register_message_handler(del_user, commands="beornotbe")
    # dp.register_callback_query_handler(unsubscribe, text_contains="subscribe")
